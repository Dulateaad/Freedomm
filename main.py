import telebot
import os
from dotenv import load_dotenv
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import time
from collections import defaultdict
import csv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
INSTRUCTION_LINK = os.getenv("INSTRUCTION_LINK")
DOWNLOAD_LINK = "https://freedombank.onelink.me/WNLd/h8jtco42"

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
admin_ids_raw = os.getenv("ADMIN_CHAT_IDS", "")
ADMIN_CHAT_IDS = set(int(x.strip()) for x in admin_ids_raw.split(",") if x.strip().isdigit())

bot = telebot.TeleBot(TOKEN)

# –§–∞–π–ª—ã
user_ids_file = "user_ids.txt"
referrals_file = "referrals.txt"
contacts_file = "contacts.txt"
users_file = "users.txt"
bloggers_file = "bloggers.txt"
verified_users_file = "verified_users.txt"
broadcast_state = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_user_ids():
    try:
        with open(user_ids_file, "r") as f:
            return set(int(line.strip()) for line in f if line.strip())
    except FileNotFoundError:
        return set()

def save_user_ids():
    with open(user_ids_file, "w") as f:
        for uid in user_ids:
            f.write(f"{uid}\n")

def load_bloggers():
    try:
        with open(bloggers_file, "r") as f:
            return set(line.strip().lower() for line in f if line.strip())
    except FileNotFoundError:
        return set()

def save_blogger(username):
    with open(bloggers_file, "a") as f:
        f.write(f"{username.lower()}\n")

def is_verified(cid):
    try:
        with open(verified_users_file, "r") as f:
            return str(cid) in [line.strip() for line in f]
    except FileNotFoundError:
        return False

def add_verified(cid):
    with open(verified_users_file, "a") as f:
        f.write(f"{cid}\n")

user_ids = load_user_ids()
bloggers = load_bloggers()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu(username, cid):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    if username and username.lower() in bloggers:
        markup.row("üìà –ú–æ–∏ —Å—Ç–∞—Ä—Ç—ã")
    if cid in ADMIN_CHAT_IDS:
        markup.row("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì• –í—ã–≥—Ä—É–∑–∫–∞ CSV")
        markup.row("üì§ –í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        markup.row("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞")
        markup.row("üì¨ –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        markup.row("üöÄ –†–∞—Å—Å—ã–ª–∫–∞: –ì—Ä—É–ø–ø–∞")
    return markup

# /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    cid = message.chat.id
    username = message.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞"
    args = message.text.split()
    referrer = args[1] if len(args) > 1 else "unknown"

    if not is_verified(cid):
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = telebot.types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        markup.add(button)
        bot.send_message(cid, "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è üëá", reply_markup=markup)
        with open(referrals_file, "a") as f:
            f.write(f"{cid},{referrer},{username}\n")
        with open(users_file, "a") as f:
            f.write(f"{cid},{username}\n")
        return

    bot.send_message(cid, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=get_main_menu(username, cid))

# –ö–æ–Ω—Ç–∞–∫—Ç
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    cid = message.chat.id
    phone = message.contact.phone_number
    username = (message.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞").lower()

    with open(contacts_file, "a") as f:
        f.write(f"{cid},{phone},{username}\n")
    add_verified(cid)
    user_ids.add(cid)
    save_user_ids()

    for admin_id in ADMIN_CHAT_IDS:
        try:
            bot.send_message(admin_id, f"üìû –ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç @{username}:\n{phone}")
        except:
            continue

    bot.send_message(cid, "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω. –°–ø–∞—Å–∏–±–æ!", reply_markup=get_main_menu(username, cid))
    send_instruction(cid)

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (2 –°–ú–°)
def send_instruction(cid):
    bot.send_message(cid,
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –∫–æ–º–∞–Ω–¥–∞ –ê–π–∂–∞–Ω –ó–∞–∫–∏—Ä–æ–≤–æ–π.\n\n"
        "–°–∫–∞—á–∞–π—Ç–µ Freedom SuperApp –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç –ê–π–∂–∞–Ω + 1000 —Ç–µ–Ω–≥–µ –æ—Ç FREEDOM üéâ\n\n"
        f"{DOWNLOAD_LINK}\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ\n"
        "2. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–≤–≤–µ–¥–∏—Ç–µ –ò–ò–ù –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)\n"
        "3. –í –ø–æ–ª–µ ¬´–ü—Ä–æ–º–æ–∫–æ–¥¬ª –≤—ã–±–µ—Ä–∏—Ç–µ ZAKIROVA (–º–æ–∂–µ—Ç –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è)\n"
        "4. –î–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø—É—Å–∫–∞ –∫–∞—Ä—Ç—ã –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –±–æ—Ç –§–ò–û + –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–∞—Ä—Ç—É –Ω–∞ 100‚Ç∏\n"
        "5. –°–æ–≤–µ—Ä—à–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ–∫—É–ø–∫–∞\n"
        "6. –ü–æ–ª—É—á–∏—Ç–µ –∫—ç—à–±–µ–∫ 1000‚Ç∏\n"
        "7. –î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –ø–æ 1000‚Ç∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ ‚ù§Ô∏è\n"
        "8. –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É WhatsApp: https://chat.whatsapp.com/JZ3IJuFodwmI0jNY6CKKLs?mode=ac_t"
    )

    time.sleep(1)

    bot.send_message(cid,
        "üéÅ –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–æ 1500‚Ç∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–Ω–∫–µ –∑–∞ Toyota Camry!"
    )

# –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ
def send_group_invite_broadcast():
    for uid in user_ids:
        try:
            if uid not in ADMIN_CHAT_IDS:
                bot.send_message(
                    uid,
                    "üî• –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É –≤ WhatsApp, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–æ 1500‚Ç∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–Ω–∫–µ –∑–∞ Toyota Camry!\n\n"
                    "üëâ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å: https://chat.whatsapp.com/JZ3IJuFodwmI0jNY6CKKLs?mode=ac_t"
                )
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")

@bot.message_handler(func=lambda msg: msg.text == "üöÄ –†–∞—Å—Å—ã–ª–∫–∞: –ì—Ä—É–ø–ø–∞" and msg.chat.id in ADMIN_CHAT_IDS)
def group_broadcast_handler(message):
    bot.send_message(message.chat.id, "üì¢ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É...")
    send_group_invite_broadcast()
    bot.send_message(message.chat.id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(func=lambda msg: True)
def handle_message(message):
    cid = message.chat.id
    text = message.text.strip()
    username = (message.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞").lower()

    if not is_verified(cid):
        bot.send_message(cid, "‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and cid in ADMIN_CHAT_IDS:
        stats = defaultdict(int)
        try:
            with open(referrals_file, "r") as f:
                for line in f:
                    parts = line.strip().split(",")
                    if len(parts) >= 2:
                        stats[parts[1]] += 1
        except FileNotFoundError:
            bot.send_message(cid, "üìÇ –§–∞–π–ª referrals.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if not stats:
            bot.send_message(cid, "‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
            return

        msg = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–≥–µ—Ä–∞–º:\n\n"
        for ref, count in sorted(stats.items(), key=lambda x: -x[1]):
            msg += f"üîπ {ref} ‚Äî {count} —á–µ–ª.\n"
        bot.send_message(cid, msg)
        return

    if text == "üì• –í—ã–≥—Ä—É–∑–∫–∞ CSV" and cid in ADMIN_CHAT_IDS:
        try:
            with open(contacts_file, "r") as infile, open("contacts.csv", "w", newline='') as outfile:
                writer = csv.writer(outfile)
                writer.writerow(["Chat ID", "–ö–æ–Ω—Ç–∞–∫—Ç", "Username"])
                for line in infile:
                    parts = line.strip().split(",")
                    if len(parts) == 3:
                        writer.writerow(parts)
            with open("contacts.csv", "rb") as doc:
                bot.send_document(cid, doc)
        except Exception as e:
            bot.send_message(cid, f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ: {e}")
        return

    if text == "üì§ –í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" and cid in ADMIN_CHAT_IDS:
        try:
            with open(users_file, "r") as infile, open("users.csv", "w", newline='') as outfile:
                writer = csv.writer(outfile)
                writer.writerow(["Chat ID", "Username"])
                for line in infile:
                    parts = line.strip().split(",")
                    if len(parts) == 2:
                        writer.writerow(parts)
            with open("users.csv", "rb") as doc:
                bot.send_document(cid, doc)
        except Exception as e:
            bot.send_message(cid, f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ: {e}")
        return

    if text == "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞" and cid in ADMIN_CHAT_IDS:
        bot.send_message(cid, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ username –±–ª–æ–≥–µ—Ä–∞ (–±–µ–∑ @):")
        broadcast_state[cid] = 'adding_blogger'
        return

    if text == "üì¨ –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è" and cid in ADMIN_CHAT_IDS:
        try:
            with open("inbox.txt", "r") as f:
                lines = f.readlines()[-10:]
            if not lines:
                bot.send_message(cid, "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
                return
            msg = "üì¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏–µ:\n\n"
            for line in lines:
                parts = line.strip().split(",", 2)
                if len(parts) == 3:
                    user_id, uname, msg_text = parts
                    msg += f"üë§ @{uname} (ID: {user_id}):\nüí¨ {msg_text}\n\n"
            bot.send_message(cid, msg)
        except FileNotFoundError:
            bot.send_message(cid, "üì≠ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    if broadcast_state.get(cid) == 'adding_blogger':
        save_blogger(text.lower())
        bloggers.add(text.lower())
        bot.send_message(cid, f"‚úÖ –ë–ª–æ–≥–µ—Ä @{text} –¥–æ–±–∞–≤–ª–µ–Ω.")
        broadcast_state.pop(cid, None)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ
    if cid not in ADMIN_CHAT_IDS:
        with open("inbox.txt", "a") as f:
            f.write(f"{cid},{username},{text}\n")
        text_safe = text if len(text) < 1000 else text[:1000] + "‚Ä¶"
        for admin_id in ADMIN_CHAT_IDS:
            try:
                bot.send_message(
                    admin_id,
                    f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} (ID: {cid}):\n\nüí¨ {text_safe}"
                )
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: {e}")

    bot.send_message(cid, "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ï—Å–ª–∏ –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä ‚Äî —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã—à–µ.")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def send_daily_reminders():
    for uid in user_ids:
        try:
            if uid not in ADMIN_CHAT_IDS:
                bot.send_message(uid,
                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–∫–∞—á–∞—Ç—å Freedom SuperApp –∏ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n–°—Å—ã–ª–∫–∞: {DOWNLOAD_LINK}"
                )
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")

scheduler = BackgroundScheduler()
scheduler.add_job(
    send_daily_reminders,
    'cron',
    hour=11,
    minute=0,
    timezone=pytz.timezone('Asia/Almaty')
)
scheduler.start()

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")

if __name__ == "__main__":
    print("üîÅ Starting bot polling...")
    while True:
        try:
            bot.infinity_polling(timeout=10, long_polling_timeout=5)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ polling: {e}")
            time.sleep(5)