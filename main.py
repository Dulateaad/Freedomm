import telebot
import os
from dotenv import load_dotenv
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import time
from collections import defaultdict

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
INSTRUCTION_LINK = os.getenv("INSTRUCTION_LINK")
DOWNLOAD_LINK = "https://freedombank.onelink.me/WNLd/h8jtco42"

bot = telebot.TeleBot(TOKEN)
user_ids_file = "user_ids.txt"
referrals_file = "referrals.txt"
broadcast_state = {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_ids():
    try:
        with open(user_ids_file, "r") as f:
            return set(int(line.strip()) for line in f if line.strip())
    except FileNotFoundError:
        return set()

def save_user_ids():
    with open(user_ids_file, "w") as f:
        for uid in user_ids:
            f.write(f"{uid}\n")

user_ids = load_user_ids()

# –°—Ç–∞—Ä—Ç + –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    cid = message.chat.id
    args = message.text.split()
    referrer = args[1] if len(args) > 1 else "unknown"
    username = message.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞"

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    with open(referrals_file, "a") as f:
        f.write(f"{cid},{referrer},{username}\n")

    if cid != ADMIN_CHAT_ID:
        user_ids.add(cid)
        save_user_ids()

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –Ø —Å–∫–∞—á–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

    bot.send_message(
        cid,
        "1. –°–∫–∞—á–∞–π—Ç–µ Freedom Superapp –ø–æ —Å—Å—ã–ª–∫–µüëá\n\n"
        f"{DOWNLOAD_LINK}\n\n"
        "2. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–≤–≤–µ–¥–∏—Ç–µ –ò–ò–ù –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞).\n\n"
        "3. –í –ø–æ–ª–µ ¬´–ü—Ä–æ–º–æ–∫–æ–¥¬ª –≤—ã–±–µ—Ä–∏—Ç–µ ZAKIROVA (–±–æ–ª—å—à–∏–º–∏ –±—É–∫–≤–∞–º–∏. –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–≥—É—Ç –∏ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å).\n\n"
        "4. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã SuperCard –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –±–æ—Ç –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á—Ç–æ–± –º—ã –≤–∞–º –∑–∞–∫–∏–Ω—É–ª–∏ –¥–µ–Ω–µ–≥ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é. (–ò–ª–∏ —Å–∞–º–∏ –∑–∞–∫–∏–Ω—å—Ç–µ —Å–µ–±–µ –Ω–∞ –∫–∞—Ä—Ç—É 100 —Ç–µ–Ω–≥–µ)\n\n"
        "5. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è 100 —Ç–µ–Ω–≥–µ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ª—é–±—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:\n"
        "‚Ä¢ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–ø–µ—Ä–∞—Ü–∏–∏ - –ø–ª–∞—Ç–µ–∂–∏ - –º–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å)\n"
        "‚Ä¢ –ª–∏–±–æ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∫–∞—Ä—Ç–æ–π\n\n"
        "6. –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫—ç—à–±–µ–∫ 1000 ‚Ç∏ üéâ\n\n"
        "7. –î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –ø–æ 1000 ‚Ç∏ –∑–∞ –∫–∞–∂–¥–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ‚ù§Ô∏è\n\n"
        "8. –ù–∏–∂–µ –±—É–¥–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª —Å –∏–Ω—Ñ–æ–π, –∫–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–ª—å—à–µ.",
        reply_markup=markup
    )

# –£–∑–Ω–∞—Ç—å —Å–≤–æ–π chat ID
@bot.message_handler(commands=['myid'])
def get_my_id(message):
    bot.reply_to(message, f"–í–∞—à chat ID: `{message.chat.id}`", parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@bot.message_handler(commands=['—Ä–∞—Å—Å—ã–ª–∫–∞'])
def start_broadcast(message):
    if message.chat.id != ADMIN_CHAT_ID:
        return
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    broadcast_state[message.chat.id] = 'waiting_for_message'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@bot.message_handler(func=lambda message: broadcast_state.get(message.chat.id) == 'waiting_for_message')
def handle_broadcast_text(message):
    text = message.text
    bot.send_message(ADMIN_CHAT_ID, f"üì® –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É:\n\n{text}")

    success = 0
    fail = 0
    for uid in user_ids:
        try:
            if uid != ADMIN_CHAT_ID:
                bot.send_message(uid, f"üì¢ –ù–æ–≤–æ—Å—Ç—å –æ—Ç –∫–æ–º–∞–Ω–¥—ã Freedom:\n\n{text}")
                success += 1
        except Exception as e:
            fail += 1
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {uid}: {e}")

    bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {success}, –æ—à–∏–±–æ–∫: {fail}")
    broadcast_state.pop(message.chat.id)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.message_handler(commands=['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
def show_stats(message):
    if message.chat.id != ADMIN_CHAT_ID:
        return

    stats = defaultdict(int)
    try:
        with open(referrals_file, "r") as f:
            for line in f:
                parts = line.strip().split(",")
                if len(parts) >= 2:
                    stats[parts[1]] += 1
    except FileNotFoundError:
        bot.send_message(message.chat.id, "üìÇ –§–∞–π–ª referrals.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not stats:
        bot.send_message(message.chat.id, "‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return

    msg = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–≥–µ—Ä–∞–º:*\n\n"
    for ref, count in sorted(stats.items(), key=lambda x: -x[1]):
        msg += f"üîπ {ref} ‚Äî {count} —á–µ–ª.\n"

    bot.send_message(message.chat.id, msg, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda msg: True)
def handle_response(message):
    cid = message.chat.id
    text = message.text.strip()
    username = message.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞"

    if cid != ADMIN_CHAT_ID:
        user_ids.add(cid)
        save_user_ids()

    if text.lower() in ["—è —Å–∫–∞—á–∞–ª", "—è —Å–∫–∞—á–∞–ª–∞", "‚úÖ —è —Å–∫–∞—á–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"]:
        bot.send_message(cid, f"üì≤ –û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram-–∫–∞–Ω–∞–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π: {INSTRUCTION_LINK}")
        return

    admin_msg = f"üì• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username}\nüÜî ID: {cid}\nüí¨: {text}"
    bot.send_message(ADMIN_CHAT_ID, admin_msg)

    bot.send_message(cid, "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")

    if "—Å–∫–∞—á–∞–ª" in text.lower() or "—Å–∫–∞—á–∞–ª–∞" in text.lower():
        bot.send_message(cid, f"üì≤ –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram-–∫–∞–Ω–∞–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π: {INSTRUCTION_LINK}")
    else:
        bot.send_message(
            cid,
            f"üîî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ *Freedom SuperApp*, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –ø–µ—Ä–µ–≤–æ–¥.\n\n–°—Å—ã–ª–∫–∞: {DOWNLOAD_LINK}",
            parse_mode="Markdown"
        )

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def send_daily_reminders():
    for uid in user_ids:
        try:
            if uid != ADMIN_CHAT_ID:
                bot.send_message(uid,
                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–∫–∞—á–∞—Ç—å *Freedom SuperApp* –∏ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n–°—Å—ã–ª–∫–∞: {DOWNLOAD_LINK}",
                    parse_mode="Markdown"
                )
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")

scheduler = BackgroundScheduler()
scheduler.add_job(
    send_daily_reminders,
    'cron',
    hour=11,
    minute=0,
    timezone=pytz.timezone('Asia/Almaty')
)
scheduler.start()

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ polling: {e}")
        time.sleep(10)
