import telebot
import os
from dotenv import load_dotenv
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import time
from collections import defaultdict

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
INSTRUCTION_LINK = os.getenv("INSTRUCTION_LINK")
DOWNLOAD_LINK = "https://freedombank.onelink.me/WNLd/h8jtco42"

bot = telebot.TeleBot(TOKEN)
user_ids_file = "user_ids.txt"
referrals_file = "referrals.txt"
broadcast_state = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_ids():
    try:
        with open(user_ids_file, "r") as f:
            return set(int(line.strip()) for line in f if line.strip())
    except FileNotFoundError:
        return set()

def save_user_ids():
    with open(user_ids_file, "w") as f:
        for uid in user_ids:
            f.write(f"{uid}\n")

user_ids = load_user_ids()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –Ø —Å–∫–∞—á–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    markup.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîç –ú–æ–∏ —Å—Ç–∞—Ä—Ç—ã")
    return markup

# –°—Ç–∞—Ä—Ç —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    cid = message.chat.id
    args = message.text.split()
    referrer = args[1] if len(args) > 1 else "unknown"
    username = message.from_user.username or str(cid)

    with open(referrals_file, "a") as f:
        f.write(f"{cid},{referrer},{username}\n")

    if cid != ADMIN_CHAT_ID:
        user_ids.add(cid)
        save_user_ids()

    bot.send_message(
        cid,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ Freedom Superapp –ø–æ —Å—Å—ã–ª–∫–µüëá\n\n"
        f"{DOWNLOAD_LINK}\n\n"
        "2. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ *ZAKIROVA* (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è).\n"
        "3. –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:\n"
        "   ‚Ä¢ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "   ‚Ä¢ –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–∫—É–ø–∫—É\n\n"
        "üí∏ –ü–æ–ª—É—á–∏—Ç–µ –∫—ç—à–±–µ–∫ 1000 ‚Ç∏!\n"
        "üéÅ –î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –µ—â—ë –ø–æ 1000 ‚Ç∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞!",
        reply_markup=main_menu(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda msg: True)
def handle_response(message):
    cid = message.chat.id
    text = message.text.strip().lower()
    username = message.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞"

    if cid != ADMIN_CHAT_ID:
        user_ids.add(cid)
        save_user_ids()

    if text in ["—è —Å–∫–∞—á–∞–ª", "—è —Å–∫–∞—á–∞–ª–∞", "‚úÖ —è —Å–∫–∞—á–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"]:
        bot.send_message(cid, f"üì≤ –û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π: {INSTRUCTION_LINK}")
        return

    if text == "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and cid == ADMIN_CHAT_ID:
        show_stats(message)
        return

    if text == "üîç –º–æ–∏ —Å—Ç–∞—Ä—Ç—ã":
        show_my_starts(message)
        return

    admin_msg = f"üì• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username}\nüÜî ID: {cid}\nüí¨: {message.text}"
    bot.send_message(ADMIN_CHAT_ID, admin_msg)

    bot.send_message(cid, "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º (–¥–ª—è –∞–¥–º–∏–Ω–∞)
def show_stats(message):
    stats = defaultdict(int)
    try:
        with open(referrals_file, "r") as f:
            for line in f:
                parts = line.strip().split(",")
                if len(parts) >= 2:
                    stats[parts[1]] += 1
    except FileNotFoundError:
        bot.send_message(message.chat.id, "üìÇ –§–∞–π–ª referrals.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not stats:
        bot.send_message(message.chat.id, "‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return

    msg = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–≥–µ—Ä–∞–º:*\n\n"
    for ref, count in sorted(stats.items(), key=lambda x: -x[1]):
        msg += f"üîπ {ref} ‚Äî {count} —á–µ–ª.\n"

    bot.send_message(message.chat.id, msg, parse_mode="Markdown")

# –°—Ç–∞—Ä—Ç–æ–≤–∞–≤—à–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def show_my_starts(message):
    cid = message.chat.id
    username = message.from_user.username or str(cid)
    my_ref = username

    referred_users = []
    try:
        with open(referrals_file, "r") as f:
            for line in f:
                parts = line.strip().split(",")
                if len(parts) >= 3 and parts[1] == my_ref:
                    referred_users.append(parts[2])
    except FileNotFoundError:
        bot.send_message(cid, "üìÇ –§–∞–π–ª —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return

    if not referred_users:
        bot.send_message(cid, "‚ùó –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.")
        return

    msg = f"üîç *–í–∞—à–∏ –ø–µ—Ä–µ—Ö–æ–¥—ã:* {len(referred_users)} —á–µ–ª.\n\n"
    msg += "\n".join([f"‚Ä¢ {u}" for u in referred_users])

    bot.send_message(cid, msg, parse_mode="Markdown")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def send_daily_reminders():
    for uid in user_ids:
        try:
            if uid != ADMIN_CHAT_ID:
                bot.send_message(uid,
                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–∫–∞—á–∞—Ç—å *Freedom SuperApp* –∏ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n–°—Å—ã–ª–∫–∞: {DOWNLOAD_LINK}",
                    parse_mode="Markdown"
                )
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")

scheduler = BackgroundScheduler()
scheduler.add_job(
    send_daily_reminders,
    'cron',
    hour=11,
    minute=0,
    timezone=pytz.timezone('Asia/Almaty')
)
scheduler.start()

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ polling: {e}")
        time.sleep(10)
